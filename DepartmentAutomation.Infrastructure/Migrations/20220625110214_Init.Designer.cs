// <auto-generated />
using System;
using DepartmentAutomation.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DepartmentAutomation.Infrastructure.Migrations
{
    [DbContext(typeof(DepartmentAutomationContext))]
    [Migration("20220625110214_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AudienceEducationalProgram", b =>
                {
                    b.Property<int>("AudiencesId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.HasKey("AudiencesId", "EducationalProgramsId");

                    b.HasIndex("EducationalProgramsId");

                    b.ToTable("AudienceEducationalProgram");
                });

            modelBuilder.Entity("CompetenceFormationLevelEvaluationToolType", b =>
                {
                    b.Property<int>("CompetenceFormationLevelsId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationToolTypesId")
                        .HasColumnType("int");

                    b.HasKey("CompetenceFormationLevelsId", "EvaluationToolTypesId");

                    b.HasIndex("EvaluationToolTypesId");

                    b.ToTable("CompetenceFormationLevelEvaluationToolType");
                });

            modelBuilder.Entity("CompetenceLesson", b =>
                {
                    b.Property<int>("CompetencesId")
                        .HasColumnType("int");

                    b.Property<int>("LessonsId")
                        .HasColumnType("int");

                    b.HasKey("CompetencesId", "LessonsId");

                    b.HasIndex("LessonsId");

                    b.ToTable("CompetenceLesson");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Audience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.CompetenceFormationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<string>("FactualDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormationLevel")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("int");

                    b.Property<string>("LearningOutcomes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("IndicatorId");

                    b.ToTable("CompetenceFormationLevels");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StudyStartingYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.DepartmentHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DepartmentHeads");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactWorkHours")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProjectSemester")
                        .HasColumnType("int");

                    b.Property<int?>("CourseWorkSemester")
                        .HasColumnType("int");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("LaborIntensityCreditUnits")
                        .HasColumnType("int");

                    b.Property<int>("LaborIntensityHours")
                        .HasColumnType("int");

                    b.Property<int?>("LaboratoryClassesHours")
                        .HasColumnType("int");

                    b.Property<int>("LecturesHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PracticalClassesHours")
                        .HasColumnType("int");

                    b.Property<int>("SelfStudyHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EducationalProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalRecommendedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.HasIndex("ReviewerId")
                        .IsUnique()
                        .HasFilter("[ReviewerId] IS NOT NULL");

                    b.ToTable("EducationalPrograms");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EvaluationTool", b =>
                {
                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationToolTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramId", "EvaluationToolTypeId");

                    b.HasIndex("EvaluationToolTypeId");

                    b.ToTable("EvaluationTools");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EvaluationToolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EvaluationToolTypes");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.FederalStateEducationalStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FederalStateEducationalStandards");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InformationBlocks");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationBlockContent", b =>
                {
                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("InformationBlockId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationalProgramId", "InformationBlockId");

                    b.HasIndex("InformationBlockId");

                    b.ToTable("InformationBlockContents");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InformationBlockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InformationBlockId");

                    b.ToTable("InformationTemplates");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.KnowledgeAssessment", b =>
                {
                    b.Property<int>("WeekId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeControlFormId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMark")
                        .HasColumnType("int");

                    b.HasKey("WeekId", "KnowledgeControlFormId");

                    b.HasIndex("KnowledgeControlFormId");

                    b.ToTable("KnowledgeAssessment");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.KnowledgeControlForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeControlForms");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingCourseFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("TrainingCourseFormId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Literature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Literatures");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.LiteratureTypeInfo", b =>
                {
                    b.Property<int>("LiteratureId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("LiteratureId", "EducationalProgramId");

                    b.HasIndex("EducationalProgramId");

                    b.ToTable("LiteratureTypeInfos");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.MethodicalRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MethodicalRecommendations");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseNumber")
                        .HasColumnType("int");

                    b.Property<int>("CourseProjectEndWeek")
                        .HasColumnType("int");

                    b.Property<int>("ExamEndWeek")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("WeeksNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.SemesterDistribution", b =>
                {
                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeCheckType")
                        .HasColumnType("int");

                    b.HasKey("DisciplineId", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.ToTable("SemesterDistributions");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("FederalStateEducationalStandardId")
                        .HasColumnType("int");

                    b.Property<string>("LearningForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudyPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("FederalStateEducationalStandardId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicRanks");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademicDegreeId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicRankId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("AcademicRankId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TrainingCourseForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingCourseForms");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<int>("IndependentWorkHours")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingModuleNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalProgramId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("DisciplineIndicator", b =>
                {
                    b.Property<int>("DisciplinesId")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorsId")
                        .HasColumnType("int");

                    b.HasKey("DisciplinesId", "IndicatorsId");

                    b.HasIndex("IndicatorsId");

                    b.ToTable("DisciplineIndicator");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<int>("DisciplinesId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("DisciplinesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("EducationalProgramInspector", b =>
                {
                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("InspectorsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramsId", "InspectorsId");

                    b.HasIndex("InspectorsId");

                    b.ToTable("EducationalProgramInspector");
                });

            modelBuilder.Entity("EducationalProgramKnowledgeControlForm", b =>
                {
                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeControlFormsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramsId", "KnowledgeControlFormsId");

                    b.HasIndex("KnowledgeControlFormsId");

                    b.ToTable("EducationalProgramKnowledgeControlForm");
                });

            modelBuilder.Entity("EducationalProgramMethodicalRecommendation", b =>
                {
                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("MethodicalRecommendationsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramsId", "MethodicalRecommendationsId");

                    b.HasIndex("MethodicalRecommendationsId");

                    b.ToTable("EducationalProgramMethodicalRecommendation");
                });

            modelBuilder.Entity("EducationalProgramProtocol", b =>
                {
                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramsId", "ProtocolsId");

                    b.HasIndex("ProtocolsId");

                    b.ToTable("EducationalProgramProtocol");
                });

            modelBuilder.Entity("EducationalProgramTrainingCourseForm", b =>
                {
                    b.Property<int>("EducationalProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingCourseFormsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalProgramsId", "TrainingCourseFormsId");

                    b.HasIndex("TrainingCourseFormsId");

                    b.ToTable("EducationalProgramTrainingCourseForm");
                });

            modelBuilder.Entity("LessonWeek", b =>
                {
                    b.Property<int>("LessonsId")
                        .HasColumnType("int");

                    b.Property<int>("WeeksId")
                        .HasColumnType("int");

                    b.HasKey("LessonsId", "WeeksId");

                    b.HasIndex("WeeksId");

                    b.ToTable("LessonWeek");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AudienceEducationalProgram", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Audience", null)
                        .WithMany()
                        .HasForeignKey("AudiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceFormationLevelEvaluationToolType", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.CompetenceFormationLevel", null)
                        .WithMany()
                        .HasForeignKey("CompetenceFormationLevelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.EvaluationToolType", null)
                        .WithMany()
                        .HasForeignKey("EvaluationToolTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceLesson", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.CompetenceFormationLevel", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("CompetenceFormationLevels")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Indicator", "Indicator")
                        .WithMany("CompetenceFormationLevels")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Curriculum", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Curricula")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Department", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.DepartmentHead", "DepartmentHead")
                        .WithOne("Department")
                        .HasForeignKey("DepartmentAutomation.Domain.Entities.Department", "DepartmentHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Discipline", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany("Disciplines")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Department", "Department")
                        .WithMany("Disciplines")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EducationalProgram", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Discipline", "Discipline")
                        .WithOne("EducationalProgram")
                        .HasForeignKey("DepartmentAutomation.Domain.Entities.EducationalProgram", "DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Reviewer", "Reviewer")
                        .WithOne("EducationalProgram")
                        .HasForeignKey("DepartmentAutomation.Domain.Entities.EducationalProgram", "ReviewerId");

                    b.Navigation("Discipline");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EvaluationTool", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("EvaluationTools")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.EvaluationToolType", "EvaluationToolType")
                        .WithMany("EvaluationTools")
                        .HasForeignKey("EvaluationToolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("EvaluationToolType");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Indicator", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Competence", "Competence")
                        .WithMany("Indicators")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationBlockContent", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("InformationBlockContents")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.InformationBlock", "InformationBlock")
                        .WithMany("InformationBlockContents")
                        .HasForeignKey("InformationBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("InformationBlock");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationTemplate", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.InformationBlock", "InformationBlock")
                        .WithMany("InformationTemplates")
                        .HasForeignKey("InformationBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformationBlock");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.KnowledgeAssessment", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.KnowledgeControlForm", "KnowledgeControlForm")
                        .WithMany("KnowledgeAssessments")
                        .HasForeignKey("KnowledgeControlFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Week", "Week")
                        .WithMany("KnowledgeAssessments")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeControlForm");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("Lessons")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.TrainingCourseForm", "TrainingCourseForm")
                        .WithMany("Lessons")
                        .HasForeignKey("TrainingCourseFormId");

                    b.Navigation("EducationalProgram");

                    b.Navigation("TrainingCourseForm");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.LiteratureTypeInfo", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("LiteratureTypeInfos")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Literature", "Literature")
                        .WithMany("LiteratureTypeInfos")
                        .HasForeignKey("LiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("Literature");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.SemesterDistribution", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Discipline", "Discipline")
                        .WithMany("SemesterDistributions")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Semester", "Semester")
                        .WithMany("SemesterDistributions")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Specialty", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.FederalStateEducationalStandard", "FederalStateEducationalStandard")
                        .WithMany("Specialties")
                        .HasForeignKey("FederalStateEducationalStandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("FederalStateEducationalStandard");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.Teacher", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicDegree", "AcademicDegree")
                        .WithMany("Teachers")
                        .HasForeignKey("AcademicDegreeId");

                    b.HasOne("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicRank", "AcademicRank")
                        .WithMany("Teachers")
                        .HasForeignKey("AcademicRankId");

                    b.HasOne("DepartmentAutomation.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.TeacherInformation.Position", "Position")
                        .WithMany("Teachers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicDegree");

                    b.Navigation("AcademicRank");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Week", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", "EducationalProgram")
                        .WithMany("Weeks")
                        .HasForeignKey("EducationalProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Semester", "Semester")
                        .WithMany("Weeks")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalProgram");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("DisciplineIndicator", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Indicator", null)
                        .WithMany()
                        .HasForeignKey("IndicatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.TeacherInformation.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalProgramInspector", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Inspector", null)
                        .WithMany()
                        .HasForeignKey("InspectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalProgramKnowledgeControlForm", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.KnowledgeControlForm", null)
                        .WithMany()
                        .HasForeignKey("KnowledgeControlFormsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalProgramMethodicalRecommendation", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.MethodicalRecommendation", null)
                        .WithMany()
                        .HasForeignKey("MethodicalRecommendationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalProgramProtocol", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Protocol", null)
                        .WithMany()
                        .HasForeignKey("ProtocolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalProgramTrainingCourseForm", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.EducationalProgram", null)
                        .WithMany()
                        .HasForeignKey("EducationalProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.TrainingCourseForm", null)
                        .WithMany()
                        .HasForeignKey("TrainingCourseFormsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonWeek", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.Week", null)
                        .WithMany()
                        .HasForeignKey("WeeksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DepartmentAutomation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepartmentAutomation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Competence", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Curriculum", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Department", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.DepartmentHead", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Discipline", b =>
                {
                    b.Navigation("EducationalProgram");

                    b.Navigation("SemesterDistributions");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EducationalProgram", b =>
                {
                    b.Navigation("CompetenceFormationLevels");

                    b.Navigation("EvaluationTools");

                    b.Navigation("InformationBlockContents");

                    b.Navigation("Lessons");

                    b.Navigation("LiteratureTypeInfos");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.EvaluationToolType", b =>
                {
                    b.Navigation("EvaluationTools");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.FederalStateEducationalStandard", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Indicator", b =>
                {
                    b.Navigation("CompetenceFormationLevels");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.InformationBlock", b =>
                {
                    b.Navigation("InformationBlockContents");

                    b.Navigation("InformationTemplates");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.KnowledgeControlForm", b =>
                {
                    b.Navigation("KnowledgeAssessments");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Literature", b =>
                {
                    b.Navigation("LiteratureTypeInfos");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Reviewer", b =>
                {
                    b.Navigation("EducationalProgram");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Semester", b =>
                {
                    b.Navigation("SemesterDistributions");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Curricula");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicDegree", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.AcademicRank", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TeacherInformation.Position", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.TrainingCourseForm", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DepartmentAutomation.Domain.Entities.Week", b =>
                {
                    b.Navigation("KnowledgeAssessments");
                });
#pragma warning restore 612, 618
        }
    }
}
